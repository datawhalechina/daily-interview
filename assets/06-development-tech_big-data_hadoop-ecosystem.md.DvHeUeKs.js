import{_ as o,C as c,c as l,o as p,ag as e,j as a,G as i,a as n,w as r}from"./chunks/framework.DT5BmYxR.js";const _=JSON.parse('{"title":"相关技?","description":"","frontmatter":{},"headers":[],"relativePath":"06-development-tech/big-data/hadoop-ecosystem.md","filePath":"06-development-tech/big-data/hadoop-ecosystem.md"}'),T={name:"06-development-tech/big-data/hadoop-ecosystem.md"},m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"15.901ex",height:"2.536ex",role:"img",focusable:"false",viewBox:"0 -871.1 7028.1 1121.1","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.416ex",height:"2.52ex",role:"img",focusable:"false",viewBox:"0 -864 4603.7 1114","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.534ex",height:"2.536ex",role:"img",focusable:"false",viewBox:"0 -871.1 5540.2 1121.1","aria-hidden":"true"};function g(k,s,f,x,w,y){const t=c("center");return p(),l("div",null,[s[13]||(s[13]=e(`<h1 id="相关技" tabindex="-1">相关技? <a class="header-anchor" href="#相关技" aria-label="Permalink to &quot;相关技?&quot;">​</a></h1><p>在解决海量数据的问题的时候使用的技术，但是注意这里只是从技术角度进行分析，只是一种思想并不代表业界的技术策略? 常用到的算法策略.</p><ol><li>分治：多层划分、MapReduce</li><li>排序：快速排序、桶排序、堆排序</li><li>数据结构：堆、位图、布隆过滤器、倒排索引、二叉树、Trie树、B树，红黑?</li><li>Hash映射：hashMap、simhash、局部敏感哈?</li></ol><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><blockquote><p>排序:<br> 　　将一组无序的集合，根据某个给定的条件，将其变成有序的方法就是排序。从这个我给出的不严谨的定义中排序是方法，目的是让原来无序的集合满足条件有序? 　　这里我们基于海量数据的考虑重新思考排序，不会详述每一种排序方法的原理，主要面向的是如何在海量数据情况下使用排序方法?</p></blockquote><blockquote><p>常用的排序方?<br> 　　插入排序，选择排序，冒泡排序，希尔排序，快速排序，归并排序，堆排序，桶排序，计数排序，基数排序? 下面给出几种排序算法的简单介绍图? 　　　　　<a href="https://ibb.co/cFNAoL"><img src="https://preview.ibb.co/in9ZF0/Screenshot-from-2018-11-05-14-04-03.png" alt="Screenshot-from-2018-11-05-14-04-03" border="0"></a></p></blockquote><p>既然有这么多的排序方法，我们可以直接读取数据到内存中直接调用语言中封装好的排序方法即可。但是数据量很大，不能将数据同时读入内存? 这就出现了所有的外排序，我们可以用归并排序的思想来解决这个问题，也可以基于数据范围用&quot;计数排序&quot;的思想来解决?<br> 排序真的很重要吗？我一直相信一句话:没有排序解决不了的问题。这里给出几个需求，例如:</p><ul><li>取最大的ｋ个数，直接降序排序取前ｋ个即可?</li><li>推荐、搜索业务，我们也可以直接排?精度不高)</li><li>二分查找之前也要求数据有?</li></ul><h2 id="堆排" tabindex="-1">堆排? <a class="header-anchor" href="#堆排" aria-label="Permalink to &quot;堆排?&quot;">​</a></h2><blockquote><p>在top k中我们用到了一个数据结构堆(有最大堆和最小堆)，这里就先介绍一下这个数据结构的性质，基于最? 堆进行介绍。堆是一个完全二叉树，对于任意的节点，我们可以使用数据来表示最大堆，设置下标从0开? 满足以下性质:</p></blockquote><ul><li>root &gt; left &amp;&amp; root &gt; right. (左右节点存在)</li><li>根节?root_index; 左孩子节?left_index; 右孩子节?right_index</li><li>left_index = root_index * 2 + 1</li><li>right_index = root_index * 2 + 2</li><li>root_index = (*_index - 1) / 2</li></ul><p>在堆的数据结构进行增删改查的过程中，我们始终维护堆的数据结构，定义MaxheapFy(int *A, int i)表示维护第i? 节点满足最大堆的性质，注意这里没有考虑到泛型编程，正常应该提供一个比较方法的函数，让使用者自己设置比较方式? 从下面的伪代码中，我们可以知道对于一个大小为n的堆，维护一次堆的性质，最坏时间为O(logn)，但是必须保? 在改变之前，他是满足堆的性质的?</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void MaxheapFy(int *A,int i) {</span></span>
<span class="line"><span>    // i 要在A的范围之内，</span></span>
<span class="line"><span>    assert(i &gt;= 0);</span></span>
<span class="line"><span>    assert(i &lt; n) // 堆的大小</span></span>
<span class="line"><span>    l = LEFT(i), r = RIGHT(i); // 得到左右子节点，如果存在</span></span>
<span class="line"><span>    now = i;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 找到左右孩子的最大?</span></span>
<span class="line"><span>    if(l&lt;=heapsize&amp;&amp;A[l]&gt;A[now]){</span></span>
<span class="line"><span>        now=l;//交换A[l]和A[i]，并递归维护下一个当前结点now</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if(r&lt;=heapsize&amp;&amp;A[r]&gt;A[now]){</span></span>
<span class="line"><span>        now=r;//交换A[l]和A[i]，并递归维护下一个当前结点now</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if(now != i) { // 交换，递归维护</span></span>
<span class="line"><span>        swap(A[i], A[now]);</span></span>
<span class="line"><span>        MaxheapFy(A, now);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>基于上面的这个维护的性质，我们可以直接对于长度为n的数组建立最大堆，我们知道当只有一个元素的时候，一定满足最大堆的性质? 基于这个性质，我们对于长度为n的数组A，从 n / 2向前维护每一个节点的性质，就可以得到最大堆.从下面给出的最大堆 的构建代码，我们可以分析建堆的时间复杂度是O(nlogn).因为每次维护是O(logn),维护n次，(这里计算时间复杂度的时候，忽略常数系数)?</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void BuildMaxHeap(int *A,int n){//A[1..n]</span></span>
<span class="line"><span>    heapsize=n;//全局变量，表示最大堆的大?</span></span>
<span class="line"><span>    for(int i=n/2;i&gt;=1;i--){//从n/2..1维护堆中每个节点的最大堆性质：结点的值大于起孩子的?</span></span>
<span class="line"><span>        MaxheapFY(A,i);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>建成最大堆之后，从最大堆的性质我们知道，A[0]一定是最大值，如果要堆A升序排序，就可以swap(A[0], A[n-1]); 继续维护A[0],直到堆中只是一个元素，这就完成了堆排序。从这个思路出发，对于top k问题，我们为什么要维护一? 最小堆呢，因为我们要过滤所有的数据，保证每次弹出一个最小值，之后剩下的k个一定是top k的最大值，但是这k个不一? 有序，如果需要我们可以堆这k进行任何排序，因为我们通过过滤，数据已经很少了，时间复杂度就是从n个中过滤出来k个? 首先任选k个构建最小堆, 时间复杂度O(klogk), 用最小堆过滤n-k个数字，每次维护堆的性质，时间O((n-k)logk). 总的时间复杂度O(klogk + (n-k)logk)?注意当k多大时，我们不在使用堆的数据结构，这里留给读者计??</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void HeapSort(int *A,int n){</span></span>
<span class="line"><span>    BuildMaxHeap(A,n);//建立最大堆</span></span>
<span class="line"><span>    for(int i=n;i&gt;=2;i--){</span></span>
<span class="line"><span>        //cout&lt;&lt;A[1]&lt;&lt;&quot; &quot;;</span></span>
<span class="line"><span>        swap(A[1],A[i]);//交互A[1]和A[i],使得A[i]中为当前最大的元素</span></span>
<span class="line"><span>        heapsize--;//堆大小减?，便于下次操作去掉已经排好序的元?</span></span>
<span class="line"><span>        MaxheapFY(A,1);//此时A[1]不一定满足最大堆的性质，重新维护下?的最大堆的性质</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="快速排" tabindex="-1">快速排? <a class="header-anchor" href="#快速排" aria-label="Permalink to &quot;快速排?&quot;">​</a></h2><blockquote><p>快速排序是对冒泡排序的改进。通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列?</p></blockquote><p>*<em>伪代?</em></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int partition(array,left,right){</span></span>
<span class="line"><span>    index = left;</span></span>
<span class="line"><span>    i = left+1, j = right;</span></span>
<span class="line"><span>    while(1) {</span></span>
<span class="line"><span>        while(i&lt;j &amp;&amp; array[i]&lt;array[index]) ++i;</span></span>
<span class="line"><span>        while(i&lt;j &amp;&amp; array[j]&gt;array[index]) ++i;</span></span>
<span class="line"><span>        if(i&gt;j) break;</span></span>
<span class="line"><span>        else{</span></span>
<span class="line"><span>            swap(array[i],array[j]);</span></span>
<span class="line"><span>            ++i; --j;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    swap(array[index], array[j]);</span></span>
<span class="line"><span>    return j</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Qsort(array,0,n-1)</span></span>
<span class="line"><span>void Qsort(array, left, right){</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    if(left &lt; right) {</span></span>
<span class="line"><span>        mid = partition(array, left, right);</span></span>
<span class="line"><span>        Qsort(array, left, mid-1);</span></span>
<span class="line"><span>        Qsort(array, mid+1, right);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>快速排序在海量数据处理的过程中，一般不会直接使用，因为快速排序在基于内存的排序时，性能很好，是最常用的方法，例如我们对大数据进行划分后，可以对单个小文件应用快速排序。其实应用多还有就是快速排序中的一次划分很重要，比如我们有很多性别{男，女}，请将所有的女性放到男性的前面，我们只需要才有划分思想就OK了?</p><h2 id="桶排" tabindex="-1">桶排? <a class="header-anchor" href="#桶排" aria-label="Permalink to &quot;桶排?&quot;">​</a></h2><blockquote><p>桶排序的工作原理是将数据分装到有限数量的桶里，对每个桶分别进行排序，如果能将数据均匀分配，排序的速度将是很快的?</p></blockquote><p>*<em>伪代?</em></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bucket_sort(array):</span></span>
<span class="line"><span>    buckets[10]; // 申请10个桶</span></span>
<span class="line"><span>    for d in array:</span></span>
<span class="line"><span>        index = function(d) // 将d划分到每一个桶?</span></span>
<span class="line"><span>        buckets[index].append(index)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 对每一个桶分别进行排序</span></span>
<span class="line"><span>    for i in {1...10}:</span></span>
<span class="line"><span>        sort(buckets[i])</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // concat所有结果，这里是连接不是归并，</span></span>
<span class="line"><span>    // 我们划分的时候保证buckets[i] &lt; buckets[i+1]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="位图排序" tabindex="-1">位图排序 <a class="header-anchor" href="#位图排序" aria-label="Permalink to &quot;位图排序&quot;">​</a></h2><blockquote><p>使用提示，如何想到使用计数排序或者在海量数据处理方面使用计数排序的思想呢？如果我们知道所有的数字只出现一次，我们就可以只使用计算排序中的记录函数，将所有存在的值对应的位置设置?，否则对应为0，扫描整个数组输出位置为1对应的下标即可完成排序。这种思想可以转为位图排序?</p></blockquote><blockquote><p>我们使用一个位图来表示所有的数据范围?1位串来表示，如果这个数字出现怎对应的位置就是1，否则就?.例如我们有一个集合S = {1,4,2,3,6,10,7}; 注意到最大?0，用位图表示?111011001，对应为1的位置表示这个数字存在，否则表示这个数字不存在?</p></blockquote><p>*<em>伪代?</em></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// step 1, 初始化为0</span></span>
<span class="line"><span>for(i = 0; i &lt; n; i++){</span></span>
<span class="line"><span>    bit[i] = 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// step 2, 读取数据，对应设置为1</span></span>
<span class="line"><span>for d in all file_read:</span></span>
<span class="line"><span>    bit[d] = 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// step3, 对应?的位置写入文?</span></span>
<span class="line"><span>for(i = 0; i &lt; n; i++) {</span></span>
<span class="line"><span>    if(bit[i] == 1) {</span></span>
<span class="line"><span>        write i to sort_file</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="归并排序" tabindex="-1">归并排序 <a class="header-anchor" href="#归并排序" aria-label="Permalink to &quot;归并排序&quot;">​</a></h2><blockquote><p>归并排序: 建立在归并操作上的一种排序算法，该方法采用分治法的一个非常典型应用，一般我们都是使用二路归并，就是将数据划分成两部分进行处理，但是注意我们可以是多路归并，不要让二路归并排序限制我们的思想? 从下面的伪代码中，我们可以很容易看到二路归并排序只有两个部分，一个是递归划分，一个是归并操作，这就是我们最长用到的归并排序。但是在海量数据的排序过程中，我们可以使用二路归并，当然我也可以选择多路归并排序?</p></blockquote><p><strong>伪代?</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 归并</span></span>
<span class="line"><span>merge(array, left, mid, right):</span></span>
<span class="line"><span>    tmp = new int[right - left + 1] // 申请复制空间</span></span>
<span class="line"><span>    i = left, j = mid+1, k = 0;</span></span>
<span class="line"><span>    while(i &lt;= mid &amp;&amp; j &lt;= right) {</span></span>
<span class="line"><span>        if(array[i] &lt; array[j]) tmp[k++] = array[i++];</span></span>
<span class="line"><span>        else tmp[k++] = array[j++];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // 处理尾部，可能会有一部分没有处理结束</span></span>
<span class="line"><span>    while(i &lt;= mid) tmp[k++] = array[i++];</span></span>
<span class="line"><span>    while(j &lt;= right) tmp[k++] = array[j++];</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // copy回到原来的数? tmp -&gt; array</span></span>
<span class="line"><span>    copy(array[left, right], tmp[0,k-1])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调用</span></span>
<span class="line"><span>merge_sort(array, left, right):</span></span>
<span class="line"><span>    if(left &lt; right) {</span></span>
<span class="line"><span>        mid = (left + right) / 2;</span></span>
<span class="line"><span>        merge_sort(array, left, mid);</span></span>
<span class="line"><span>        merge_sort(array, mid+1, right);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 调用归并函数</span></span>
<span class="line"><span>        merge(arr, left, mid, right);</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="倒排索引" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引" aria-label="Permalink to &quot;倒排索引&quot;">​</a></h2><blockquote><p>倒排索引是一种索引方法，常用在搜索引擎中，这个数据结构是根据属性值来确定记录的位置。对于一批文档，我们的属性值就是关键字，对应值是包含该属性的文档的ID或者文化的位置?</p></blockquote><p>例如:</p><hr>`,39)),s[14]||(s[14]=a("h2",{"a,b,c,e":"",id:"t0-a-b-c-t1-a-d-t2",tabindex:"-1"},[n("T0 = {a,b,c}"),a("br"),n(" T1 = {a,d}"),a("br"),n(" T2 = "),a("a",{class:"header-anchor",href:"#t0-a-b-c-t1-a-d-t2","aria-label":`Permalink to "T0 = {a,b,c}    
T1 = {a,d}  
T2 = {a,b,c,e}"`},"​")],-1)),s[15]||(s[15]=a("p",null,[a("em",null,"构建倒排索引")],-1)),s[16]||(s[16]=a("h2",{1:"",id:"a-0-1-2-b-0-2-c-0-2-d-1-e",tabindex:"-1"},[n("a: {0,1,2}"),a("br"),n(" b: {0,2}"),a("br"),n(" c: {0,2}"),a("br"),n(" d: {1}"),a("br"),n(" e: "),a("a",{class:"header-anchor",href:"#a-0-1-2-b-0-2-c-0-2-d-1-e","aria-label":`Permalink to "a: {0,1,2}  
b: {0,2}    
c: {0,2}    
d: {1}  
e: {1}"`},"​")],-1)),s[17]||(s[17]=e(`<blockquote><p>检索的时候可以根据关键字的交集或者并集进行检索，可以看出，倒排索引就是正向索引的相反。原理其实很简单，可以通过学习或者问题的性质，来发现什么时候使用倒排碎索引，最重要的倒排索引怎么优化，在内存中和文件上如何分配，才能满足快速的检索。倒排索引的构建可以根据自己的业务，决定需要存储什么信息，但是属性值是确定的，对应的集合中可以保留出现的次数等信息?</p></blockquote><h2 id="字典" tabindex="-1">字典? <a class="header-anchor" href="#字典" aria-label="Permalink to &quot;字典?&quot;">​</a></h2><blockquote><p>字典树，Trie树是一种前缀树，我们之前也有介绍过，一般应用在快速查询中，例如搜索提示，当你输入前半部分，会提示后半部分的内容。字典树用一句话表示就是根据字符串的前缀构成的树结构? <strong>格式定义</strong></p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>template&lt;typename T&gt;</span></span>
<span class="line"><span>struct TreeNode {</span></span>
<span class="line"><span>    int flag; // {1,0}1:表示存在?:表示不存?</span></span>
<span class="line"><span>    int count: // 表示这个字符串出现的次数</span></span>
<span class="line"><span>    struct TreeNode **childs; // 索引的孩子节?</span></span>
<span class="line"><span>    T value;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>搜索字典项目的方法为?来自百度百科)</p><ol><li>从根结点开始一次搜索；</li><li>取得要查找关键词的第一个字母，并根据该字母选择对应的子树并转到该子树继续进行检索；</li><li>在相应的子树上，取得要查找关键词的第二个字母,并进一步选择对应的子树进行检索?</li><li>迭代过程?</li><li>在某个结点处，关键词的所有字母已被取出，则读取附在该结点上的信息，即完成查找?</li></ol></blockquote>`,5)),i(t,null,{default:r(()=>[...s[0]||(s[0]=[a("a",{href:"https://imgbb.com/"},[a("img",{src:"https://image.ibb.co/jXM9qL/d62a6059252dd42a745cc2c2033b5bb5c9eab806.jpg",alt:"d62a6059252dd42a745cc2c2033b5bb5c9eab806",border:"0"})],-1),a("br",null,null,-1),a("a",{target:"_blank",href:"https://deleteacc.com/match"},null,-1)])]),_:1}),s[18]||(s[18]=e('<h2 id="面试问题" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题" aria-label="Permalink to &quot;面试问题&quot;">​</a></h2><ol><li>求top k, 可以用到堆数据结?<br> 例如我们?00个有?降序)的数组，现在从这?00个数组中找到最大的k个元素。这就是上述问题的抽象。使?00路归?后面的归并排?? 用一个大小为k的最大堆，每次弹出一个最大值，记录是那个队列中的值，直到出现k个数，就结束。这里里面的两个思想?</li></ol><ul><li>归并，不能处理的大问题，分成多个小问题并行处理，之后归并结果，比如外排序</li><li>堆，帮助我们找到top k，k要相对n较小?</li></ul><p><a href="https://ibb.co/fLfEiL"><img src="https://preview.ibb.co/kDtpHf/Screenshot-from-2018-11-05-16-53-45.png" alt="Screenshot-from-2018-11-05-16-53-45" border="0"></a></p><ol start="2"><li>中位?</li></ol><blockquote><p>在一个大小为10GB的文件中有一堆整数，乱序排列，要求找出中位数。内存限?GB? 这个问题，我们可以使用外排序，并且记录元素的各种，最后得到中位数即可。这里我们使?*桶排?*的思想?</p></blockquote><ul><li>将所有的数据根据?位进行分桶，最多有255个桶，并且记录每个桶中元素的格式。这里的桶是文件表示?</li><li>根据划分性质，我们有buckets[i] &lt; buckets[i+1]; count[i]:个数</li><li>如果sum{count{1,k}} &lt; sum(count{1,n}) / 2 &lt;= sum{count(1,k+1)},得到中位数在k+1个桶中，</li><li>将k+1个桶中读取内容，假设小于2GB，否则要根据高位进行继续分桶，找到第m个数字，sum{count{1,k}}+m对应的是中位数的下标。</li></ul><p><img src="https://image.ibb.co/iTjffA/Screenshot-from-2018-11-08-16-46-28.png" alt="Screenshot"></p><ol start="3"><li>基于位图的排?</li></ol>',9)),a("blockquote",null,[a("p",null,[s[7]||(s[7]=n("给你一个文件，里面有n个不重复的正整数，而且每一个数都小于等于n(10^7)。请最多使?M的内存空间，对这个文件进行排序? 可以使用归并排序，但是时间应该慢，我们这里使用位图排序，",-1)),a("mjx-container",m,[(p(),l("svg",Q,[...s[1]||(s[1]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1436.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(1936.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2714.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(3770.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)" style="stroke-width:3;"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5548.1,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6599.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[2]||(s[2]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"10"),a("mn",null,"7")]),a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"/")]),a("mn",null,"8"),a("mo",null,"="),a("mn",null,"1.25"),a("mi",null,"M"),a("mi",null,"b")])],-1))]),s[8]||(s[8]=n(", 我们只有1M内存空间，这里可以分成两个读取文件，",-1)),a("mjx-container",b,[(p(),l("svg",d,[...s[3]||(s[3]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1333.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2055.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(2778.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(4214.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[4]||(s[4]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mo",{stretchy:"false"},"("),a("mn",null,"1"),a("mo",null,","),a("mn",null,"5"),a("mo",null,"∗"),a("msup",null,[a("mn",null,"10"),a("mn",null,"6")]),a("mo",{stretchy:"false"},")")])],-1))]),s[9]||(s[9]=n("和",-1)),a("mjx-container",u,[(p(),l("svg",h,[...s[5]||(s[5]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1833.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(3270,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(3714.7,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(5151.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[6]||(s[6]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mo",{stretchy:"false"},"("),a("mn",null,"5"),a("mo",null,"∗"),a("msup",null,[a("mn",null,"10"),a("mn",null,"6")]),a("mo",null,","),a("msup",null,[a("mn",null,"10"),a("mn",null,"7")]),a("mo",{stretchy:"false"},")")])],-1))]),s[10]||(s[10]=n("进行分开使用位图，空间占用0.625Mb.",-1))]),s[11]||(s[11]=a("p",null,[a("img",{src:"https://image.ibb.co/hL92cq/Screenshot-from-2018-11-08-15-07-23.png",alt:"Screenshot"})],-1))]),s[19]||(s[19]=a("ol",{start:"4"},[a("li",null,[n("大文件排?"),a("br"),n(" 海量数据排序，使用归并排序的思想进行排序，例如我们现在有一?G的数据文件，每一行有一?2位的正整数，现在要求只能使用1G的内存空间，对这个文件排序? 我们有大数据处理的经验都知道，内存放不下，只能将大文件分成几个小文件，这就是划分，之后对每个文件进行排序，最后归并这几个小文件的排序结果，叫做多路归并。上述的过程可以叫做外排序，即借助外部的文件进行排序?")])],-1)),s[20]||(s[20]=a("blockquote",null,[a("p",null,"从这个题目出发我们使用之前介绍过的大数据处理技术完成这个排序过程?"),a("ol",null,[a("li",null,"划分?个小文件?G / 1G = 5"),a("li",null,"将单个文件读入内存，进行排序，写入文?"),a("li",null,"使用5路归并，将每个文件作为一路排序，归并最后得到结?")])],-1)),i(t,null,{default:r(()=>[...s[12]||(s[12]=[a("a",{href:"https://ibb.co/ma0ifA"},[a("img",{src:"https://image.ibb.co/hzxktV/Screenshot-from-2018-11-07-17-49-48.png",alt:"Screenshot-from-2018-11-07-17-49-48",border:"0"})],-1)])]),_:1}),s[21]||(s[21]=e('<ol start="5"><li><p>串的快速检?</p><blockquote><p>给出N个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。在这道题中，我们可以用数组枚举，用哈希，用字典树，先把熟词建一棵树，然后读入文章进行比较，这种方法效率是比较高的?</p></blockquote></li><li><p>串排?</p><blockquote><p>给定N个互不相同的仅由一个单词构成的英文名，让你将他们按字典序从小到大输出用字典树进行排序，采用数组的方式创建字典树，这棵树的每个结点的所有儿子很显然地按照其字母大小排序。对这棵树进行先序遍历即可?</p></blockquote></li><li><p>最长公共前缀</p><blockquote><p>对所有串建立字典树，对于两个串的最长公共前缀的长度即他们所在的结点的公共祖先个数，于是，问题就转化为当时公共祖先问题?</p></blockquote></li><li><p>搜索引擎</p><blockquote><p>一个搜索引擎执行的目标就是优化查询的速度：找到某个单词在文档中出现的地方。以前，正向索引开发出来用来存储每个文档的单词的列表，接着掉头来开发了一种反向索引?</p></blockquote><blockquote><p>正向索引的查询往往满足每个文档有序频繁的全文查询和每个单词在校验文档中的验证这样的查询。实际上，时间、内存、处理器等等资源的限制，技术上正向索引是不能实现的。为了替代正向索引的每个文档的单词列表，能列出每个查询的单词所有所在文档的列表的反向索引数据结构开发了出来。随着反向索引的创建，如今的查询能通过立即的单词标示迅速获取结果（经过随机存储）。随机存储也通常被认为快于顺序存储?</p></blockquote></li></ol><h1 id="参" tabindex="-1">参? <a class="header-anchor" href="#参" aria-label="Permalink to &quot;参?&quot;">​</a></h1><ol><li><a href="https://blog.csdn.net/fool_ran/article/details/44487137">数据结构: 构建和使用堆</a></li><li>《算法导论》第六章：堆排序</li><li>《编程之美：面试与算法心得?</li></ol>',3))])}const V=o(T,[["render",g]]);export{_ as __pageData,V as default};
